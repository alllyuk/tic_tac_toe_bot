from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from src.logger import logger

from ..game.board import Board
from ..game.logic import GameLogic
from .keyboard import generate_keyboard

CONTINUE_GAME, FINISH_GAME = range(2)


async def start_handler(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
        ) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    context.user_data['board'] = Board.create_empty()
    keyboard = generate_keyboard(context.user_data['board'])

    logger.info("User started a new game.")

    await update.message.reply_text(
        '–í–∞—à —Ö–æ–¥! –ü–æ—Å—Ç–∞–≤—å—Ç–µ X –≤ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É',
        reply_markup=keyboard
    )
    return CONTINUE_GAME


async def game_handler(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
        ) -> int:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    row, col = map(int, query.data)
    board: Board = context.user_data['board']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
    if not board.is_cell_free(row, col):
        await query.edit_message_text(
            '–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é',
            reply_markup=generate_keyboard(board)
        )
        return CONTINUE_GAME

    # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
    board.state[row][col] = Board.CROSS
    logger.info("Player made step.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
    if GameLogic.check_winner(board):
        await query.edit_message_text(
            '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start',
            reply_markup=generate_keyboard(board)
        )
        logger.info("Player won.")
        return FINISH_GAME

    # –•–æ–¥ –±–æ—Ç–∞
    bot_row, bot_col = GameLogic.make_bot_move(board)
    logger.info("Bot made step.")
    if (bot_row, bot_col) == (-1, -1):  # –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
        await query.edit_message_text(
            '–ù–∏—á—å—è! ü§ù\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start',
            reply_markup=generate_keyboard(board)
        )
        return FINISH_GAME

    board.state[bot_row][bot_col] = Board.ZERO

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –±–æ—Ç
    if GameLogic.check_winner(board):
        await query.edit_message_text(
            '–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª! ü§ñ\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start',
            reply_markup=generate_keyboard(board)
        )
        logger.info("Bot won.")
        return FINISH_GAME

    await query.edit_message_text(
        '–í–∞—à —Ö–æ–¥!',
        reply_markup=generate_keyboard(board)
    )
    return CONTINUE_GAME


async def end_handler(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
        ) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    context.user_data['board'] = Board.create_empty()
    logger.info("End of game.")
    return ConversationHandler.END
